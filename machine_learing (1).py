# -*- coding: utf-8 -*-
"""machine learing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kffY8M54Bkdn7K5CIeOTEKA7DwK32fa5
"""

import pandas  as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

df=pd.read_csv("/content/sample_data/Data_Train.csv,.,.csv")

df.head()

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['index']
  ys = series['Price']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(8, 5.2), layout='constrained')
df_sorted = _df_36.sort_values('index', ascending=True)
for i, (series_name, series) in enumerate(df_sorted.groupby('Date_of_Journey')):
  _plot_series(series, series_name, i)
  fig.legend(title='Date_of_Journey', bbox_to_anchor=(1, 1), loc='upper left')
sns.despine(fig=fig, ax=ax)
plt.xlabel('index')
_ = plt.ylabel('Price')

df.info()

df.isnull().sum()

df.isnull()

df.hist(figsize=(10,10))

df.boxplot(figsize=(9,9))

df['Additional_Info'].value_counts()

df['Date_of_Journey'].head()

df.Price.value_counts()

df.Dep_Time.value_counts()

df.tail()

df.shape

df.dtypes

df.Destination.value_counts()

df.Source.value_counts()

df.info()

from sklearn.model_selection import train_test_split

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
features = ['Total_Stops', 'Duration', 'Price']
df_cleaned = df.dropna(subset=features)
X = df_cleaned[['Price']]
y = df_cleaned['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")
print(f"Coefficients: {model.coef_}")
print(f"Intercept: {model.intercept_}")